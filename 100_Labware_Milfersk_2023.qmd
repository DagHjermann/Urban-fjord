---
title: "100_Labware_Milfersk_2022"
format: html
---

## Read samples from Labware LIMS   
- Script 1**_Labware_[program]_[year]     
- function get_labware_samples    
- for comparing samples in Labware with samples in report, and (later) with other data   


```{r}

# EXTRA:
# WHAT'S THIS??
# MJA DATA - LACKING STATION FOR ALL  

# check3 <- get_nivabase_data(
#   "SELECT * FROM NIVADATABASE.LABWARE_CHECK_SAMPLE WHERE PROSJEKT LIKE '%ANAEX%'")   


```



## 1. Settings  

### For filenames  
```{r}

program_year <- "Milfersk_2023"
year <- 2023

```

## 2. Packages and functions  
```{r}

library(niRvana)
library(dplyr)
library(purrr)
library(lubridate)
library(readxl)
library(ggplot2)
library(tidyr)  
library(knitr)     # for kable
library(glue)      # alternative to paste()  
# library(fuzzyjoin)   # regex_full_join

source("../Milkys/991_Vannmiljo_snippets_functions.R")
source("../Milkys/992_Vannmiljo_Urban_fjord_functions.R")
source("../Milkys/994_Industry_data_functions.R")         # for add_coordinates()

knitr::opts_chunk$set(results = 'hold')

```

## 3. Get all samples  

### Find projects   
```{r}

if (FALSE){
  
  # Used to find the project strings ('proj' below) 
  
  # "milfersk" mentioned in PROSJEKT    
  df_proj1 <- get_nivabase_data("select PROSJEKT, ANALYSEOPPDRAG from NIVADATABASE.LABWARE_CHECK_SAMPLE where lower(PROSJEKT) like '%milfersk%'")
  
  # Samples with "17197" mentioned in PROSJEKT    
  df_proj2 <- get_nivabase_data("select PROSJEKT, ANALYSEOPPDRAG from NIVADATABASE.LABWARE_CHECK_SAMPLE where lower(PROSJEKT) like '%17197%'")
  
  df_proj3 <- get_nivabase_data("select PROSJEKT, ANALYSEOPPDRAG from NIVADATABASE.LABWARE_CHECK_SAMPLE where lower(PROSJEKT) like '%210136%'")
  
  proj <- unique(c(df_proj1$PROSJEKT, df_proj2$PROSJEKT, df_proj3$PROSJEKT))
  oppdrag <- unique(c(df_proj1$ANALYSEOPPDRAG, df_proj2$ANALYSEOPPDRAG, df_proj3$ANALYSEOPPDRAG))
  
  dput(oppdrag)
  
}

proj <- c(
  "O 17197 Milfersk", "O 210136;ANAEX O 210136;ANA - Overvåking av miljøgifter i ferskvannsnæringsnett - Milfersk (2021-2026)", 
"O 210136;ANA - Overvåking av miljøgifter i ferskvannsnæringsnett - Milfersk (2021-2026)", 
"O 17197;NIVA_L Miljøgifter i ferskvann og store innsjøer")


```


### Get samples  
```{r}

# Search using ANALYSEOPPDRAG (PROEJCT is problematic due to charcters)
# Use "oppdrag" instead (made using code above)
oppdrag <- c("653-5300", "653-4633", "653-4631", "1292-11805", "1151-12752", 
             "1151-12751", "1151-12750", "1151-12749", "1151-12748", "1151-12747", 
             "1151-12746", "1151-11881", "1151-11695", "1151-11692", "1151-11686", 
             "1151-11685", "1151-10505", "1151-10502", "1151-10501", "1151-10500", 
             "688-9567", "688-9566", "688-7736", "688-7735", "688-6415", "688-6405", 
             "688-5212", "688-5046", "688-4942", "688-4941", "688-10040")

# df_lab_all <- get_nivabase_selection(
#   "*", "LABWARE_CHECK_SAMPLE", "PROSJEKT", proj, values_are_text = TRUE)   


df_lab_all <- get_nivabase_selection(
  "*", "LABWARE_CHECK_SAMPLE", "ANALYSEOPPDRAG", oppdrag, values_are_text = TRUE)

df_lab_all %>%
  count(PROSJEKT, Year_id = substr(TEXT_ID, 4,7), Year_sample = year(SAMPLED_DATE))

```

### Samples lacking sample date   

- these are blank samples (blankprøver) as indicated by the DESCRIPTION field  
- i.e. they are not samples from the environment and should indeed have no sample date (and preferably no station?)    

```{r}

df_lab_all_withoutdate <- df_lab_all %>%
  mutate(
    Year_id = substr(TEXT_ID, 4,7),
    Year_sample = year(SAMPLED_DATE)) %>%
  filter(is.na(Year_sample))

df_lab_all_withoutdate %>%
  count(Year_id, SAMPLE_TYPE, STATUS, AQUAMONITOR_CODE, AQUAMONITOR_NAME)


```


## 4. Samples in current year       
```{r}

df_lab <- df_lab_all %>% 
  filter(year(SAMPLED_DATE) == year)

```

### Tables  

#### Stations  

* Check if station is lacking    

```{r}

df_lab %>%
  count(AQUAMONITOR_ID, AQUAMONITOR_CODE, AQUAMONITOR_NAME, SAMPLE_TYPE) 

```

#### Biota: stations and species   

* Station lacking for no samples  

```{r}

df_lab %>%
  filter(SAMPLE_TYPE %in% "BIOTA") %>%
  count(SPECIES, TISSUE, AQUAMONITOR_CODE, AQUAMONITOR_NAME) 

```

#### Samples where station is lacking  
```{r}

df_lab %>%
  filter(is.na(AQUAMONITOR_ID)) %>% # View()
  count(SAMPLE_TYPE, SPECIES, TISSUE) 

```

#### Samples where station is lacking and species not given   
```{r}

df_lab %>%
  filter(is.na(AQUAMONITOR_ID) & SPECIES == "Ikke angitt") %>% # View()
  count(DESCRIPTION) 

```



#### Check description for water samples   

```{r}

df_lab %>%
  filter(is.na(AQUAMONITOR_ID) & SAMPLE_TYPE == "FERSKVANN") %>% # View()
  count(TEXT_ID, DESCRIPTION) 

```

#### Check date  

* OK 

```{r}

df_lab %>%
  count(AQUAMONITOR_ID, AQUAMONITOR_CODE, AQUAMONITOR_NAME, SAMPLED_DATE) 

```



#### Station "Benthic food chain"     

* None in 2023

```{r}

df_lab %>%
  filter(AQUAMONITOR_NAME == "Bentisk næringskjede") %>%
  count(AQUAMONITOR_ID, AQUAMONITOR_CODE, AQUAMONITOR_NAME, SPECIES, TISSUE) 

```

#### Overvann samples  

* When taken:    
    * H1_V, H1_P = sample 1, water and particle fraction  
    * H2_V, H2_P = sample 2, water and particle fraction  
* None in 2023    

```{r}

df_lab %>%
  filter(AQUAMONITOR_NAME == "Hamar overvann") %>%
  count(AQUAMONITOR_ID, AQUAMONITOR_CODE, AQUAMONITOR_NAME, DESCRIPTION) 

```


#### HIAS samples  

* When taken:    
    * HIAS_S = Actual sediment  
    * HIAS1_V, HIAS1_P = sample 1, water and particle fraction
    * HIAS2_V, HIAS2_P = sample 2, water and particle fraction  
* None in 2023  

```{r}

df_lab %>%
  filter(AQUAMONITOR_NAME == "Avløpsvann og avløpsslam") %>%
  count(AQUAMONITOR_ID, AQUAMONITOR_CODE, AQUAMONITOR_NAME, DESCRIPTION) 

```

## 5. Save  

```{r}

fn <- glue::glue("Data/100_dat_lab_{program_year}_{today(tzone = 'UTC')}.rds")
fn

saveRDS(df_lab, fn)

```

## APPENDIX 1: Labware values   

* Water samples: PFAS (old and new) but nothing else   

```{r}

check <- get_nivabase_selection(
  "*", "LABWARE_IMPORT", "TEXT_ID", c("NR-2022-13730", "NR-2022-13731", "NR-2022-13732"), values_are_text = TRUE)   

```

## APPENDIX 2: 3 sedimemnt samples in LIMS, 1 slice ID in Nivadatabase!  

```{r}

check_samp <- readRDS("Data/100_dat_lab_Milfersk_2022_2023-06-22.rds")
writexl::write_xlsx(check_samp, "Data/100_dat_lab_Milfersk_2022_2023-06-22.xlsx")

check_samp %>%
  filter(SAMPLE_TYPE == "SEDIMENT")

id <- check_samp %>%
  filter(SAMPLE_TYPE == "SEDIMENT") %>%
  pull(TEXT_ID)
id
# "NR-2022-10833" "NR-2022-10835" "NR-2022-10834"

df2022 <- get_nivabase_selection(
  "*", "LABWARE_IMPORT", "TEXT_ID", id, values_are_text = TRUE)   

df_slice_id <- get_nivabase_selection(
  "*", "LABWARE_SLICE_ID", "LABWARE_TEXT_ID", id, values_are_text = TRUE) 
# The 3 samples have been given the same SLICE_ID (291863	)

df_slice_id

```

## APPENDIX 3 - Hork stomach contents    

* Hork (Gymnocephalus) stomach registered in three samples ("NR-2022-12225", "NR-2022-12228", "NR-2022-12229"), all have isotopes
* Chironomids registered in three samples ("NR-2022-12224", "NR-2022-10732", "NR-2022-10733"), 1 for isotopes, 2 for contaminants  


```{r}

dat_labsamples <- readRDS("Data/100_dat_lab_Milfersk_2022_2024-01-16.rds")

# NR-2022-12225	= HOM3 - Hork mageinnhold
# NR-2022-12228	= HOM1 - Hork mageinnhold
# NR-2022-12229	= HOM2 - Hork mageinnhold
# all are isotopes  

check <- get_nivabase_selection( 
  "*", "LABWARE_IMPORT", "TEXT_ID", c("NR-2022-12225", "NR-2022-12228", "NR-2022-12229"), values_are_text = TRUE) %>%
  left_join(
    dat_labsamples %>% select(TEXT_ID, SPECIES, TISSUE)
  )   
check %>% 
  count(SPECIES, TISSUE, TEXT_ID, DESCRIPTION, STATUSX) 

xtabs(~REPORTED_NAME + TEXT_ID, check)  


# 	FM-H-2 isotopes = NR-2022-12224
# 	FM-H-2 contaminants = NR-2022-10732
# 	FM-H-3 contaminants = NR-2022-10733

check2 <- get_nivabase_selection(
  "*", "LABWARE_IMPORT", "TEXT_ID", c("NR-2022-12224", "NR-2022-10732", "NR-2022-10733"), values_are_text = TRUE) %>%
  left_join(
    dat_labsamples %>% select(TEXT_ID, SPECIES, TISSUE)
  )

check2 %>% 
  count(SPECIES, TISSUE, TEXT_ID, DESCRIPTION, STATUSX) 

check2 %>% filter(TEXT_ID %in% c("NR-2022-12224")) %>% xtabs(~REPORTED_NAME, .)
check2 %>% filter(TEXT_ID %in% c("NR-2022-10732", "NR-2022-10733")) %>% xtabs(~REPORTED_NAME, .)
check2 %>% filter(REPORTED_NAME %in% c("PFOS"))

check2 %>% 
  filter(REPORTED_NAME %in% c("PFOS")) %>%
  select(SPECIES, TEXT_ID, DESCRIPTION, FORMATTED_ENTRY) 

```

```{r}

check3 <- get_nivabase_data("select * from NIVADATABASE.BIOTA_TISSUE_TYPES")  

check3 <- get_nivabase_selection(
  "*", "BIOTA_SAMPLES", "TISSUE_ID")  




```

